// This file is generated by Firebase Genkit.
// Do not edit this file as changes may be overwritten.

'use server';

/**
 * @fileOverview An AI agent that suggests alternative color palettes for a website.
 * 
 * - suggestPalette - A function that suggests alternative color palettes.
 * - SuggestPaletteInput - The input type for the suggestPalette function.
 * - SuggestPaletteOutput - The return type for the suggestPalette function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPaletteInputSchema = z.object({
  primaryColor: z
    .string()
    .describe('The primary color of the website in hex format (e.g. #A729F0).'),
  backgroundColor: z
    .string()
    .describe('The background color of the website in hex format (e.g. #222222).'),
  accentColor: z
    .string()
    .describe('The accent color of the website in hex format (e.g. #34D1C8).'),
});
export type SuggestPaletteInput = z.infer<typeof SuggestPaletteInputSchema>;

const SuggestPaletteOutputSchema = z.object({
  palettes: z
    .array(
      z.object({
        primaryColor: z
          .string()
          .describe('A suggested primary color in hex format.'),
        backgroundColor: z
          .string()
          .describe('A suggested background color in hex format.'),
        accentColor: z
          .string()
          .describe('A suggested accent color in hex format.'),
        description: z
          .string()
          .optional()
          .describe('A short description of the color palette.'),
      })
    )
    .describe('An array of suggested color palettes.'),
});
export type SuggestPaletteOutput = z.infer<typeof SuggestPaletteOutputSchema>;

export async function suggestPalette(input: SuggestPaletteInput): Promise<SuggestPaletteOutput> {
  return suggestPaletteFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestPalettePrompt',
  input: {schema: SuggestPaletteInputSchema},
  output: {schema: SuggestPaletteOutputSchema},
  prompt: `You are an expert UI/UX designer and color theorist specializing in creating beautiful, harmonious, and accessible color palettes for modern web applications.

Your task is to suggest three alternative color palettes based on the user's current colors. The palettes should be suitable for a high-end, professional portfolio for an AI developer.

**Key Principles to Follow:**

1.  **Harmony:** The colors within each palette must work well together. Use established color harmony rules (e.g., analogous, complementary, triadic, monochromatic) to ensure a pleasing result. The relationship between the colors should be intentional.
2.  **Contrast & Accessibility:** Ensure there is sufficient contrast between the background color and the primary/accent colors to ensure text is readable. The palettes should be visually clear and accessible.
3.  **Professionalism:** The suggested palettes should feel modern, sophisticated, and appropriate for a technology professional's portfolio. Avoid overly jarring or chaotic combinations.
4.  **Visual Hierarchy:** The colors should naturally create a visual hierarchy. The \`primaryColor\` should be suitable for main interactive elements like buttons, the \`accentColor\` for highlights and secondary elements, and the \`backgroundColor\` for the main canvas.

**User's Current Palette:**
- Primary: {{{primaryColor}}}
- Background: {{{backgroundColor}}}
- Accent: {{{accentColor}}}

**Your Task:**
Based on the principles above, generate three distinct and professional color palettes. For each palette, provide a primary color, a background color, and an accent color in hex format. Also include a short, descriptive name or theme for each palette (e.g., "Deep Ocean", "Modern Professional", "Vibrant Tech").`,
});

const suggestPaletteFlow = ai.defineFlow(
  {
    name: 'suggestPaletteFlow',
    inputSchema: SuggestPaletteInputSchema,
    outputSchema: SuggestPaletteOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
